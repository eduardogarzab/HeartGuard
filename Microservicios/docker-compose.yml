services:

  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: heartguard
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
      RABBITMQ_DEFAULT_VHOST: heartguard
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - heartguard_net

  influxdb:
    image: influxdb:2.7
    restart: unless-stopped
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: heartguard
      DOCKER_INFLUXDB_INIT_PASSWORD: ${DOCKER_INFLUXDB_INIT_PASSWORD}
      DOCKER_INFLUXDB_INIT_ORG: ${INFLUX_ORG}
      DOCKER_INFLUXDB_INIT_BUCKET: ${INFLUX_BUCKET}
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: ${INFLUX_TOKEN}
    ports:
      - "8086:8086"
    volumes:
      - influx_data:/var/lib/influxdb2
    healthcheck:
      test: ["CMD", "influx", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - heartguard_net

  gateway:
    build:
      context: .
      dockerfile: Dockerfile.service
      args:
        SERVICE_DIR: gateway
    restart: unless-stopped
    env_file: .env
    environment:
      SERVICE_NAME: gateway
      SERVICE_PORT: ${GATEWAY_PORT}
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - "5000:5000"
    depends_on:
      auth_service:
        condition: service_healthy
    networks:
      - heartguard_net

  auth_service:
    build:
      context: .
      dockerfile: Dockerfile.service
      args:
        SERVICE_DIR: auth_service
    restart: unless-stopped
    env_file: .env
    environment:
      SERVICE_NAME: auth
      SERVICE_PORT: ${AUTH_PORT}
      DATABASE_URL: ${POSTGRES_URL_AUTH}
      JWT_SECRET: ${JWT_SECRET}
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
    healthcheck:
      test: ["CMD-SHELL", "python -c \"import urllib.request; urllib.request.urlopen('http://localhost:5001/health')\""]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - heartguard_net

  organization_service:
    build:
      context: .
      dockerfile: Dockerfile.service
      args:
        SERVICE_DIR: organization_service
    restart: unless-stopped
    env_file: .env
    environment:
      SERVICE_NAME: organization
      SERVICE_PORT: ${ORGANIZATION_PORT}
      DATABASE_URL: ${POSTGRES_URL_ORGANIZATION}
      JWT_SECRET: ${JWT_SECRET}
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      auth_service:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "python -c \"import urllib.request; urllib.request.urlopen('http://localhost:5002/health')\""]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - heartguard_net

  user_service:
    build:
      context: .
      dockerfile: Dockerfile.service
      args:
        SERVICE_DIR: user_service
    restart: unless-stopped
    env_file: .env
    environment:
      SERVICE_NAME: user
      SERVICE_PORT: ${USER_PORT}
      DATABASE_URL: ${POSTGRES_URL_USER}
      JWT_SECRET: ${JWT_SECRET}
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      auth_service:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "python -c \"import urllib.request; urllib.request.urlopen('http://localhost:5003/health')\""]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - heartguard_net

  patient_service:
    build:
      context: .
      dockerfile: Dockerfile.service
      args:
        SERVICE_DIR: patient_service
    restart: unless-stopped
    env_file: .env
    environment:
      SERVICE_NAME: patient
      SERVICE_PORT: ${PATIENT_PORT}
      DATABASE_URL: ${POSTGRES_URL_PATIENT}
      JWT_SECRET: ${JWT_SECRET}
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      auth_service:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "python -c \"import urllib.request; urllib.request.urlopen('http://localhost:5004/health')\""]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - heartguard_net

  device_service:
    build:
      context: .
      dockerfile: Dockerfile.service
      args:
        SERVICE_DIR: device_service
    restart: unless-stopped
    env_file: .env
    environment:
      SERVICE_NAME: device
      SERVICE_PORT: ${DEVICE_PORT}
      DATABASE_URL: ${POSTGRES_URL_DEVICE}
      JWT_SECRET: ${JWT_SECRET}
      INFLUX_URL: ${INFLUX_URL}
      INFLUX_TOKEN: ${INFLUX_TOKEN}
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      auth_service:
        condition: service_healthy
      influx_service:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "python -c \"import urllib.request; urllib.request.urlopen('http://localhost:5005/health')\""]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - heartguard_net

  influx_service:
    build:
      context: .
      dockerfile: Dockerfile.service
      args:
        SERVICE_DIR: influx_service
    restart: unless-stopped
    env_file: .env
    environment:
      SERVICE_NAME: influx
      SERVICE_PORT: ${INFLUX_SERVICE_PORT}
      INFLUX_URL: ${INFLUX_URL}
      INFLUX_TOKEN: ${INFLUX_TOKEN}
      INFLUX_ORG: ${INFLUX_ORG}
      JWT_SECRET: ${JWT_SECRET}
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      influxdb:
        condition: service_healthy
      auth_service:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "python -c \"import urllib.request; urllib.request.urlopen('http://localhost:5006/health')\""]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - heartguard_net

  inference_service:
    build:
      context: .
      dockerfile: Dockerfile.service
      args:
        SERVICE_DIR: inference_service
    restart: unless-stopped
    env_file: .env
    environment:
      SERVICE_NAME: inference
      SERVICE_PORT: ${INFERENCE_PORT}
      DATABASE_URL: ${POSTGRES_URL_INFERENCE}
      JWT_SECRET: ${JWT_SECRET}
      RABBITMQ_URL: ${RABBITMQ_URL}
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      rabbitmq:
        condition: service_healthy
      auth_service:
        condition: service_healthy
    volumes:
      - inference_models:/models
    healthcheck:
      test: ["CMD-SHELL", "python -c \"import urllib.request; urllib.request.urlopen('http://localhost:5007/health')\""]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - heartguard_net

  alert_service:
    build:
      context: .
      dockerfile: Dockerfile.service
      args:
        SERVICE_DIR: alert_service
    restart: unless-stopped
    env_file: .env
    environment:
      SERVICE_NAME: alert
      SERVICE_PORT: ${ALERT_PORT}
      DATABASE_URL: ${POSTGRES_URL_ALERT}
      JWT_SECRET: ${JWT_SECRET}
      RABBITMQ_URL: ${RABBITMQ_URL}
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      rabbitmq:
        condition: service_healthy
      auth_service:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "python -c \"import urllib.request; urllib.request.urlopen('http://localhost:5008/health')\""]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - heartguard_net

  notification_service:
    build:
      context: .
      dockerfile: Dockerfile.service
      args:
        SERVICE_DIR: notification_service
    restart: unless-stopped
    env_file: .env
    environment:
      SERVICE_NAME: notification
      SERVICE_PORT: ${NOTIFICATION_PORT}
      DATABASE_URL: ${POSTGRES_URL_NOTIFICATION}
      JWT_SECRET: ${JWT_SECRET}
      RABBITMQ_URL: ${RABBITMQ_URL}
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      rabbitmq:
        condition: service_healthy
      auth_service:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "python -c \"import urllib.request; urllib.request.urlopen('http://localhost:5009/health')\""]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - heartguard_net

  media_service:
    build:
      context: .
      dockerfile: Dockerfile.service
      args:
        SERVICE_DIR: media_service
    restart: unless-stopped
    env_file: .env
    environment:
      SERVICE_NAME: media
      SERVICE_PORT: ${MEDIA_PORT}
      DATABASE_URL: ${POSTGRES_URL_MEDIA}
      JWT_SECRET: ${JWT_SECRET}
      RABBITMQ_URL: ${RABBITMQ_URL}
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      auth_service:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    secrets:
      - gcp-sa
    healthcheck:
      test: ["CMD-SHELL", "python -c \"import urllib.request; urllib.request.urlopen('http://localhost:5010/health')\""]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - heartguard_net

  audit_service:
    build:
      context: .
      dockerfile: Dockerfile.service
      args:
        SERVICE_DIR: audit_service
    restart: unless-stopped
    env_file: .env
    environment:
      SERVICE_NAME: audit
      SERVICE_PORT: ${AUDIT_PORT}
      DATABASE_URL: ${POSTGRES_URL_AUDIT}
      JWT_SECRET: ${JWT_SECRET}
      RABBITMQ_URL: ${RABBITMQ_URL}
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      rabbitmq:
        condition: service_healthy
      auth_service:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "python -c \"import urllib.request; urllib.request.urlopen('http://localhost:5011/health')\""]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - heartguard_net

networks:
  heartguard_net:
    driver: bridge

volumes:
  influx_data:
  inference_models:

secrets:
  gcp-sa:
    file: ./secrets/gcp-sa.json
